center of projection must always be at origin to make things easy. Then put camera vector space at 1 unit in the w direction away from origin, and put 4d shape with the closest point to the origin in the w-direction lying on the vector space.

Now, the projection of any point (a, b, c, d) from the shape onto the space is (a/d, b/c, c/d, 1)
d must always be >= 1

one big cube taking up most of space on right, bar div on left retractable with x

what kinds of classes / functions do I need?

Graph class for entire graph, keep all graph data contained, manipulate from outside only with functions, static
helper matrix functions in Matrix class (don't use libraries, unnecessary length), also static
settings functions? can stay in settings functions object, nicely contained, easy access with string names (Settings class?)
How do we do the point movements? can it be done better than last time? experiment.

options: class syntax style
        object / prototype syntax style
        constructor syntax style

favor object style, only one object needed, class with static methods unnecessary.
figure out a way around dumb matrices

remember the issue you had with the trackball controls zoom. Don't let that happen again.

controls need to be updated all the time

when  a function is passed into requestAnimationFrame, it will not be called from the context of the class it belongs to.
It will be called as its own function, and will therefore not have normal access to the objects properties.
It's "this" becomes the global object, the window.
