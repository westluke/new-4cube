center of projection must always be at origin to make things easy. Then put camera vector space at 1 unit in the w direction away from origin, and put 4d shape with the closest point to the origin in the w-direction lying on the vector space.

Now, the projection of any point (a, b, c, d) from the shape onto the space is (a/d, b/c, c/d, 1)
d must always be >= 1

one big cube taking up most of space on right, bar div on left retractable with x

what kinds of classes / functions do I need?

Graph class for entire graph, keep all graph data contained, manipulate from outside only with functions, static
helper matrix functions in Matrix class (don't use libraries, unnecessary length), also static
settings functions? can stay in settings functions object, nicely contained, easy access with string names (Settings class?)
How do we do the point movements? can it be done better than last time? experiment.

options: class syntax style
        object / prototype syntax style
        constructor syntax style

favor object style, only one object needed, class with static methods unnecessary.
figure out a way around dumb matrices

remember the issue you had with the trackball controls zoom. Don't let that happen again.

controls need to be updated all the time

when  a function is passed into requestAnimationFrame, it will not be called from the context of the class it belongs to.
It will be called as its own function, and will therefore not have normal access to the objects properties.
It's "this" becomes the global object, the window.

When you use geometry.applyMatrix(), it doesn't apply the matrix the way you think it would.
every geometry is actually only stored in positions RELATIVE to their "position", and only that position is actually transformed.
I have to find a way to transform the actual vertices.
SOLUTION: Matrix multiplication is distributive, and the actual position of each vertex is (position_v + vertex_v)
With 4d transformation matrix A, I want A * (actual position) or A * (position_v + vertex_v)
OR
A * position_v + A * vertex_v
which I can do by just using the normal mesh.geometry.applyMatrix, and then mesh.position.applyMatrix4

When a vector is used to build a geometry, changing the vector WILL NOT change the geometry.

You cannot pass in an empty geometry to a mesh.

TO FREE UP MEMORY: set the value of a var variable to null, and allow the current function to end.
The variable will become eligible for garbage collection, and even without that it will take up only a tiny amount of space.

NEW VECTOR SYSTEM:
We have lines, points, perspective_lines, and perspective_points.
every vector in lines is really an alias to a vector in points, saving memory.
Same with the perspective versions.

When a new transformation is applied, it is applied ONLY to the vectors in points.
The points are then passed through the perspectify function, which copies the data into the perspective_points function.
This will also, of course, update the perspective_lines array.
At this point, the perspective_lines can be used to build new geometries and update the meshes.

COMMENTS FROM GRAPH.JS:
During program execution, the real 4d points and lines are kept in vector form
In the plot stage, the vector_lines and points are perspectified, and the new perspetive points stored in a list
the vectors in that list are cloned into the proper meshes, and then the perspective list is destroyed completely

shit. The animate stage will have to be very very different

during the animate loop, what happens?
the actual 4d vectors need to be transformed with the current rotation
then they need to be perspectified (very quick actually), and passed into the meshes somehow. HOW?
can I just update their geometries? that was the old approach, and I think it's best. make new geometry each time, delete the old.

Oh. I would have had to do that anyways, because I'm transforming 4d vectors, not 3d.

Perspectify: pretend that the point with the lowest w-value is actually at w=1, with the rest of the shape moved
				accordingly. Now, for every point, divide the x, y, and z-values by the point's w-value

should I store vector_lines AND vector_points? I think so.
perspective lines and points are NEVER stored. There is no point in storing them, because we only transform the others.

NEW STRUCTURE:
the only thing we change is the points lists.
The lines lists actually only contain references to the vectors in the points lists, so we only need to change those.
This means that we need to build the points lists, then use a connections matrix to build the lines lists.

THEN we copy the vectors into a perspective points list, and reference those in a perspective lines list.

ORDER OF IMPLEMENTATION:
get connections array
make the function to build the vector_lines based off the vector_points
test that transforming the vector_points transforms the vector_lines

how should plot work now?
make a new function that does the geometry creation, so it can be used in animate

Also, for efficiency,  extrusion geometries should only ever use LambertMaterials
and sphere geometries should only ever use PhongMaterials. Need to recognize which is which in animate().

function takes in vector_lines array, produces aliased vector_points arrays
also goes through original array, and if any vectors are the same, those are aliased to each other.


dat_gui:

uses the gui to change the values in the give object.

if they've never visited the site before, the help/about button should just softly pulse.
It should lead to another page, which can explain in detail and expand beyond the window.

course:
get the gui working for manual rotations, animations, etc.
Get the points customizer working
add node, use cookies to get a starting help window that can also be accessed from the main display.
ensure compatibility with other browsers
get mobile working and nice
add higher dimensions


selective hide and show for the panels might be the best option. No, just have the settings div scroll.
I want the user to have everything available, all the time, especially considering I almost have enough space.
problem: will have to manually add buttons to the gui's for manual rotations

how to display plotted points and get them back for deletion?
really don't want to just parse backwards.
can store them in an initial list, but that takes space.

animate CAN ONLY RUN if render is also running. critical.
options for interface: animateAndRender or Render, not just Animate.

FUCK there's a memory leak when you press reset.
FOR THE FUTURE: WRITE UNIT TESTS. FUCK THOSE COULD HAVE BEEN SO HANDY
ALSO MORE ISOLATION, MODIFYING GRAPH VARIABLES DIRECTLY IS BAD

YEP, the slowdown is definitely coming from restarting the renderloop. I think its causing multiple copies to run at the same time.

SO: NEVER EVER stop animateandrender and then immediately start again. If there is no delay, two different function loops will be started, and cause a memory leak.

THE PERSPECTIVE PROJECTION IS WRONG
it doesn't make any sense to shift the whole thing over, that means the addition of one new point causes all the others to change.
Projection should be onto space w=1 with center of projection at origin, yes, but the space should never move, and neither should the object.
just divide by w-distance from plane. If the object's w is greater than 0, divide by w.
if less,
